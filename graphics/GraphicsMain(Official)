import java.awt.Rectangle;
import java.io.File;
import java.util.ArrayList;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import processing.core.PImage;
import processing.core.PApplet;

public class GraphicsMain extends PApplet {
	
	//Something Unexpected???
	StringBuilder hmm = new StringBuilder();
	
	
	//Audio
	Audio zinnia;
	Audio choose;
	Audio menu_theme;
	
	//GIF Stuff:
//	int optcounter = 1;
	PImage[] images;
	PImage[] images_sharick;
	int imageCount = 8;
	int frame = 0;
	int frame_sharick = 0;
	  
	//Testing:
	static int count = 0;
	
	//Controls:
	//DOWN or 'S' = Blade Attack
	//Z or M = Bow Attack	
	
	// Platform Bar Y-coordinate:
	private int bottomBar = 160;
	
	//Attack Cooldowns:
	static double cooldownTimer1;
	static double cooldownTimer2;
	static double bowCooldownTimer1;
	static double bowCooldownTimer2;
	
	//Arrow Directions:
	int arrowDirection1 = 1;
	int arrowDirection2 = 1;
	
	// Player Sprites:
	PImage img;
	PImage option;
	PImage menu;
	File char1 = new File("PlayerSprite1.png");
	File char2 = new File("PlayerSprite2.png");
	File swordBlade = new File("SwordBlade.PNG");
	
	//Weapon Image Files:
	File daggerBladeLeft = new File("DaggerBladeLeft.png");
	File daggerBladeRight = new File("DaggerBladeRight.png");
	File strongBladeLeft = new File("StrongBladeLeft.png");
	File strongBladeRight = new File("StrongBladeRight.png");
	File stoneBladeLeft = new File("StoneBladeLeft.png");
	File stoneBladeRight = new File("StoneBladeRight.png");
	File longBowLeft = new File("LongBowLeft.png");
	File longBowRight = new File("LongBowRight.png");
	
	PImage daggerBladeImage = new PImage();	
	PImage strongBladeImage = new PImage();
	PImage stoneBladeImage = new PImage();
	ArrayList<PImage> weaponImages = new ArrayList<PImage>(3);
	
	PImage combatBackground = new PImage();
	PImage selectionBackground = new PImage();

	// PSprites:
	PSprite p1 = new PSprite(char1, 50, 40, 100, 570);
	PSprite p2 = new PSprite(char2, 50, 40, 1200, 570);
	PSprite blade1 = new PSprite(swordBlade, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite blade2 = new PSprite(swordBlade, 20, 40, p2.getX() + 2 * p2.getWidth() / 3, p2.getY());
	PSprite pDaggerBladeLeft1 = new PSprite(daggerBladeLeft, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pDaggerBladeRight1 = new PSprite(daggerBladeRight, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());	
	PSprite pDaggerBladeLeft2 = new PSprite(daggerBladeLeft, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pDaggerBladeRight2 = new PSprite(daggerBladeRight, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());	
	PSprite pStrongBladeLeft1 = new PSprite(strongBladeLeft, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pStrongBladeRight1 = new PSprite(strongBladeRight, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());	
	PSprite pStrongBladeLeft2 = new PSprite(strongBladeLeft, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pStrongBladeRight2 = new PSprite(strongBladeRight, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pStoneBladeLeft1 = new PSprite(stoneBladeLeft, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pStoneBladeRight1 = new PSprite(stoneBladeRight, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());	
	PSprite pStoneBladeLeft2 = new PSprite(stoneBladeLeft, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pStoneBladeRight2 = new PSprite(stoneBladeRight, 20, 40, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	
	//Bow Sprites
	PSprite pBow1Left = new PSprite(longBowLeft, 30, 10, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pBow1Right = new PSprite(longBowRight, 30, 10, p1.getX() + 2 * p1.getWidth() / 3, p1.getY());
	PSprite pBow2Left = new PSprite(longBowLeft, 30, 10, p2.getX() + 2 * p2.getWidth() / 3, p2.getY());
	PSprite pBow2Right = new PSprite(longBowRight, 30, 10, p2.getX() + 2 * p2.getWidth() / 3, p2.getY());


	// Player Characters:
	private Character player1 = new Character(p1, p1, 8, 100);
	private Character player2 = new Character(p2, p2, 8, 100);
	
	// Player Weapons:
	private Weapon weapon1 = new DaggerBlade(p1, p1);
	private Weapon weapon2 = new DaggerBlade(p2, p2);
	
	private Weapon bow1 = new Bow(pBow1Left, pBow1Right, 24,2,1.5); //NO SELECTION HERE
	private Weapon bow2 = new Bow(pBow2Left, pBow2Right, 24,2,1.5);
			
	// Drawable Characters:
	private DrawableCharacter dPlayer1;
	private DrawableCharacter dPlayer2;
	
	// Gravity + Jump Fields:
	private static int gravity = -10;
	
	// Drawable Blades:
	private DrawableWeapon dWeapon1;
	private DrawableWeapon dWeapon2;
	
	// Drawable Bows:
	private DrawableWeapon dBow1;
	private DrawableWeapon dBow2;
	
	// Movement:
	private boolean left1 = false;
	private boolean up1 = false;
	private boolean right1 = false;

	private boolean left2 = false;
	private boolean up2 = false;
	private boolean right2 = false;
	
	//For Selection Screen:
	private int player1BladeChoice = 0;
	private int player2BladeChoice = 0;
	
	//Array of Possible Bows + Blades:
	Blade[] bladeSelection1 = {new DaggerBlade(pDaggerBladeLeft1, pDaggerBladeRight1), new StrongBlade(pStrongBladeLeft1, pStrongBladeRight1),
			new StoneBlade(pStoneBladeLeft1, pStoneBladeRight1)};
	Blade[] bladeSelection2 = {new DaggerBlade(pDaggerBladeLeft2, pDaggerBladeRight2), new StrongBlade(pStrongBladeLeft2, pStrongBladeRight2),
			new StoneBlade(pStoneBladeLeft2, pStoneBladeRight2)};

	// Game Status Fields:
	private boolean inCombat = false;
	private boolean inSelection = false;
	private boolean notMenu = false;

	public static void main(String[] args) {
		PApplet.main("GraphicsMain");
	}

	public void settings() {
		size(1300, 750);
	}

	public void setup() {
		//For Options:
		images = new PImage[imageCount];
		for(int i = 1; i <= imageCount; i++) {
		String filename = "options" + i + ".png";
		images[i-1] = loadImage(filename);
		images[i-1].resize(1300, 750);
		}
		
		images_sharick = new PImage[150];
		for (int i = 0; i <150; i++) {
			String filename = "";
			if (i == 0)
				filename = "frame_000_delay-0.02s.png";
			else if(i < 10 && i != 0) {
				filename = "frame_00" + i + "_delay-0.02s.png";
			}
			else if (i <= 99) {
				filename = "frame_0" + i + "_delay-0.02s.png";
			}
			else
				filename = "frame_" + i + "_delay-0.02s.png";
			images_sharick[i] = loadImage(filename);
			images_sharick[i].resize(width, height);
			
			zinnia = new Audio("zinnia.wav");
			choose = new Audio("choose.wav");
			menu_theme = new Audio("menu_theme.wav");
		}
		
		//Image Loading for Selection Screen:
		daggerBladeImage = loadImage("DaggerBladeLeft.png");
		daggerBladeImage.resize(75, 75);
		strongBladeImage = loadImage("StrongBladeLeft.png");
		strongBladeImage.resize(75, 75);
		stoneBladeImage = loadImage("StoneBladeLeft.png");
		stoneBladeImage.resize(75, 75);
		ArrayList<PImage> tempImages = new ArrayList<PImage>(3);
		tempImages.add(daggerBladeImage);
		tempImages.add(strongBladeImage);
		tempImages.add(stoneBladeImage);
		weaponImages = tempImages;
	    
	    //Other:
		player2.setFacingLeft(true);
		dWeapon1 = new DrawableWeapon(weapon1, this);
		dWeapon2 = new DrawableWeapon(weapon2, this);
		dPlayer1 = new DrawableCharacter(player1, this);
		dPlayer2 = new DrawableCharacter(player2, this);
		dBow1 = new DrawableWeapon(bow1, this);
		dBow2 = new DrawableWeapon(bow2, this);
		combatBackground = loadImage("BladeAndBowBackground.PNG");
		combatBackground.resize(1300, 630);
		selectionBackground = loadImage("StoneBackground.jpg");
		selectionBackground.resize(1300, 750);
		img = loadImage("menu.png");
		img.resize(width,  height);
		option = loadImage("option_screen.png");
		option.resize(width,  height);
		menu = loadImage("menu.png");
		menu.resize(width,  height);
	}

	public void draw() {
		if(hmm()) {
			displaySharick();
			image(img, 0, 0);
		}
		if (notMenu == false && inSelection == false) {
			image(img, 0, 0);
			menu_theme.playAudio();
		}
		
		if (notMenu == true && inSelection == false) {
			image(img, 0, 0);
			menu_theme.stopAudio();
		}
		if(inCombat) {
			if (inSelection) {
				menu_theme.stopAudio();
				choose.playAudio();
			}
			if (!inSelection) {
				choose.stopAudio();
				zinnia.playAudio();
			}
			imageMode(CORNER);
			display();
			image(img,0,0);
			// Update Positions and Drawings:
			moveCheck();
			bowMoveCheck();
			weaponFollow();
			jumpCheck();
			
			// Check Bounds
			if (player1TouchingGround()) {
				up1 = false;
				player1.setXVelocity(5);
				player1.setYVelocity(6);
			}
			if (player2TouchingGround()) {
				up2 = false;
				player2.setXVelocity(5);
				player2.setYVelocity(6);
			}
			
			//Check Game/Weapon/Character States:
			checkCooldowns();
			
			// Draw:
			imageMode(CENTER);
			dPlayer1.draw(this);
			dPlayer2.draw(this);
			imageMode(CENTER);
			dWeapon1.draw(this);
			dWeapon2.draw(this);
			imageMode(CENTER);			
			dBow1.draw(this);
			dBow2.draw(this);
//		    drawPlayerHitboxes();
//			drawWeaponHitboxes();
			drawCombatBar();
			gameOver();
		}
		if(inSelection) {
			imageMode(CORNER);
			image(selectionBackground,0,0);
			//Dividing Bar Down the Middle:
			rectMode(CORNER);
			fill(0,0,0);
			rect(width/2 - 5, 0, 10, height);
			//Draw Boxes Displaying Options:
			fill(255,255,255);
			strokeWeight(3);
			rectMode(CENTER);
			rect(width/4,height/4,100,100);
			rect(3*width/4,height/4,100,100);
			//Bit of Text:
			fill(255,255,255);
			textSize(20);
			text("Player 1 Blade Choice : ", width/4 - 120, 120);
			text("Player 2 Blade Choice : ", 3*width/4 - 120, 120);
			
			text("Damage: " + bladeSelection1[player1BladeChoice].getDamage(), width/4 - 60, 350);
			text("Damage: " + bladeSelection2[player2BladeChoice].getDamage(), 3*width/4 - 60, 350);
			
			text("Cooldown: " + bladeSelection1[player1BladeChoice].getCooldown(), width/4 - 60, 400);
			text("Cooldown: " + bladeSelection2[player2BladeChoice].getCooldown(), 3*width/4 - 60, 400);
			
			text("Use A or D to Navigate Blade Options", width/4 - 160, 600);
			text("Use the Left or Right Arrow Keys to Navigate Blade Options", 3*width/4 - 275, 600);
			
			text("Press ENTER to Submit Both Selections", width/4 - 170, 650);
			text("Press ENTER to Submit Both Selections", 3*width/4 - 170, 650);

			//Display Images:
			imageMode(CENTER);
			image(weaponImages.get(player1BladeChoice), width/4, height/4);
			image(weaponImages.get(player2BladeChoice), 3*width/4, height/4);
		}
	}

	/**
	 * Checks for User Inputs Player 1 Controls: WASD Player 2 Controls: Arrow
	 * Keys
	 */
	public void keyPressed() {
		if(inSelection) {
			if(key == ENTER) { //FINAL SELECTION
				weapon1 = bladeSelection1[player1BladeChoice];
				weapon2 = bladeSelection2[player2BladeChoice];
				dWeapon1 = new DrawableWeapon(weapon1, this);
				dWeapon2 = new DrawableWeapon(weapon2, this);
				inCombat = true;
				inSelection = false;
			}
			if (key == 'a' || key == 'd') {
				if(key == 'a') {
					if(player1BladeChoice > 0)
						player1BladeChoice--; 
				}
				if(key == 'd') {
					if(player1BladeChoice < bladeSelection1.length - 1)
						player1BladeChoice++; 
				}
			}
			if(key == CODED) {
				if(keyCode == LEFT) {
					if(player2BladeChoice > 0)
						player2BladeChoice--; 
				}
				if(keyCode == RIGHT) {
					if(player2BladeChoice < bladeSelection2.length - 1)
						player2BladeChoice++; 
				}
			}
		}
		if (inCombat) { // Checks if in combat
          if (key == 'w' || key == 'a' || key == 'c' || key == 'd' || key == 'f' || key == 'j' || key == 'm') {
              // Move Player 1 based on direction
              if (key == 'w' || key == 'W') {
                  up1 = true;
              } else if (key == 'a' || key == 'A') {
                  left1 = true;
                  player1.setFacingLeft(true);
              } else if (key == 'c') {
                  if (weapon1.getAttack() == -1) {
                      weapon1.attack();
                  }
              } else if (key == 'd') {
                  right1 = true;
                  player1.setFacingLeft(false);
              } else if (key == 'f') {
                  if (player1.isFacingLeft()) {
                      arrowDirection1 = -1;
                  } else {
                      arrowDirection1 = 1;
                  }
                  if (bow1.getAttack() == -1) {
                      bow1.setAttack(1);
                  }
              } else if (key == 'j') {
                  if (player2.isFacingLeft()) {
                      arrowDirection2 = -1;
                  } else {
                      arrowDirection2 = 1;
                  }
                  if (bow2.getAttack() == -1)
                      bow2.setAttack(1);
              }
              else if (key == 'm') {
                  if (weapon2.getAttack() == -1) {
                      weapon2.attack();
                  }
              }
          }
          else if (key == CODED) {
              if (keyCode == UP || keyCode == LEFT || keyCode == RIGHT) {
                  // Move Player 2 based on direction
                  if (keyCode == UP) {
                      up2 = true;
                  } else if (keyCode == LEFT) {
                      left2 = true;
                      player2.setFacingLeft(true);
                  } else if (keyCode == RIGHT) {
                      right2 = true;
                      player2.setFacingLeft(false);
                  } 
              }
          }
      }
  }

	/**
	 * Checks for Jumps and Smooth Movement
	 */
	public void keyReleased() {
		hmm.append(key);
		if (key != CODED){
			// Player 1 Smooth Movement
			if (key == 'w') {
				// Nothing
			}
			else if (key == 'a')
				left1 = false;
			else if (key == 'd')
				right1 = false;
		} else {
			// Player 2 Smooth Movement
			if (keyCode == UP) {
				// Nothing
			} 
			else if (keyCode == LEFT)
				left2 = false;
			else if (keyCode == RIGHT)
				right2 = false;
		}
	}
	

	public void mouseClicked() {
	if (notMenu && inSelection == false)
	{
		notMenu = false;
		img = menu;
	}
	if (notMenu == false && inSelection == false)
		if (mouseX >= 480 && mouseX <= 830 && mouseY >= 280 && mouseY <= 390) {
			notMenu = true;
			inCombat = true;
			inSelection = true;
		}
		if (mouseX >= 355 && mouseX <= 960 && mouseY >= 415 && mouseY <= 525) {
			notMenu = true;
			img = option;
		}
		
}
	
	/**
	 * Switches the images of the background
	 */
	public void display() {
		if (frame > 35)
			frame = 0;
	    img = images[frame/5];
	    frame++;
	  }

	public void displaySharick() {
		if (frame_sharick > 149*3)
			frame_sharick = 0;
		img = images_sharick[frame_sharick/3];
		frame_sharick++;
	}
	/**
	 * Checks the status of movement booleans and moves either player
	 * accordingly, allowing for smooth movement
	 */
	public void moveCheck() {
		if (left1 && player1.getX() > 0 + player1.getWidth() / 2) {
			player1.move(-player1.getSpeed(), 0);
			weapon1.move(-player1.getSpeed(), 0);
		}
		if (up1 && player1.getY() > 0 + player1.getHeight() / 2) {
			player1.move(0, -player1.getYVelocity()); // FIX
			player1.jump(this);
			weapon1.move(0, -player1.getYVelocity());
		}
		if (right1 && player1.getX() < width - player1.getWidth() / 2) {
			player1.move(player1.getSpeed(), 0);
			weapon1.move(player1.getSpeed(), 0);
		}
		if (left2 && player2.getX() > 0 + player2.getWidth() / 2) {
			player2.move(-player2.getSpeed(), 0);
			weapon2.move(-player2.getSpeed(), 0);
		}
		if (up2 && player2.getY() > 0 + player2.getHeight() / 2) {
			player2.move(0, -player2.getYVelocity()); // FIX
			player2.jump(this);
			weapon2.move(0, -player2.getYVelocity());
		}
		if (right2 && player2.getX() < width - player2.getWidth() / 2) {
			player2.move(player2.getSpeed(), 0);
			weapon2.move(player2.getSpeed(), 0);
		}
	}
	
	/**
	 * Checks Bow Movement
	 */
	public void bowMoveCheck() {
		if(!bow1.getHitbox().intersects(new Rectangle(0, 0, width, height))) {
			bow1.setX(weapon1.getX());
			bow1.setY(weapon1.getY());
			bow1.setAttack(-1);
			//BRING BACK THE HITBOX
		}
		if(!bow2.getHitbox().intersects(new Rectangle(0, 0, width, height))) {
			bow2.setAttack(-1);
			bow2.setX(weapon2.getX());
			bow2.setY(weapon2.getY());
		}
		if(bow1.getAttack() == 1) {
			bow1.move(arrowDirection1 * bow1.getSpeed(), 0);
		}
		if(bow2.getAttack() == 1) {
			bow2.move(arrowDirection2 * bow2.getSpeed(), 0);
		}
	}

	public void jumpCheck() {
		if (up1 && player1.getY() > 0 + player1.getHeight() / 2) {
			player1.move(0, -player1.getSpeed() + gravity);
			weapon1.move(0, -player1.getSpeed() + gravity);
		}
		if (up2 && player2.getY() > 0 + player2.getHeight() / 2) {
			player2.move(0, -player2.getSpeed() + gravity);
			weapon2.move(0, -player2.getSpeed() + gravity);
		}
	}

	/**
	 * Draws the Bottom Black Bar and Health Bar during Combat Mode
	 */
	public void drawCombatBar() {
		if (inCombat) {
			// Bottom Bar
			rectMode(CORNER);
			fill(0, 0, 0);
			rect(0, height - 160, width, 160);
			// //Health Bar Logic:
			// Player1:
			fill(255, 0, 0);
			rect(30, height - 140, 300, 40);
			fill(0, 255, 0);
			rect(30, height - 140, (float) (300 * ((double) player1.getHealth() / player1.getOriginalHealth())), 40);
			// Player2:
			fill(255, 0, 0);
			rect(width - 30 - 300, height - 140, 300, 40);
			fill(0, 255, 0);
			rect(width - 30 - 300, height - 140, (float) (300 * ((double) player2.getHealth() / player2.getOriginalHealth())), 40);
			// "if hit" logic (for left player)
			if (weapon2.collide(player1) == true && player1.getHealth() > 0 && weapon2.getAttack() == 1) {
				player1.setHealth(player1.getHealth() - weapon2.getDamage());
				//Add Knockback Here:
				weapon2.setAttack(0);
			}
			if (weapon1.collide(player2) == true && player2.getHealth() > 0 && weapon1.getAttack() == 1) {
				player2.setHealth(player2.getHealth() - weapon1.getDamage());
				//Add Knockback Here:
				weapon1.setAttack(0);
			}
			if(bow1.collide(player2) == true && player2.getHealth() > 0 && bow1.getAttack() == 1) {
				player2.setHealth(player2.getHealth() - bow1.getDamage());
				//Return to bow position:
				bow1.setAttack(0);
				bow1.setX(weapon1.getX());
				bow1.setY(weapon1.getY());
				
			}
			if(bow2.collide(player1) == true && player1.getHealth() > 0 && bow2.getAttack() == 1) {
				player1.setHealth(player1.getHealth() - bow2.getDamage());
				bow2.setAttack(0);
				//Return to bow position:
				bow2.setX(weapon2.getX());
				bow2.setY(weapon2.getY());
				
			}
		}
	}
	
	/**
	 * Checks Cooldowns for Both Players
	 */
	public void checkCooldowns() {
		if(cooldownTimer1 < 0) {
			cooldownTimer1 = 0;
		}
		if(cooldownTimer2 < 0) {
			cooldownTimer2 = 0;
		}
		if(cooldownTimer1 > 0) {
			cooldownTimer1 -= (double)1/(26*weapon1.getCooldown());
		}
		if(cooldownTimer2 > 0) {
			cooldownTimer2 -= (double)1/(26*weapon2.getCooldown());
		}
		if(bowCooldownTimer1 < 0) {
			bowCooldownTimer1 = 0;
		}
		if(bowCooldownTimer2 < 0) {
			bowCooldownTimer2 = 0;
		}
		if(bowCooldownTimer1 > 0) {
			bowCooldownTimer1 -= (double)1/(26*bow1.getCooldown());
		}
		if(bowCooldownTimer2 > 0) {
			bowCooldownTimer2 -= (double)1/(26*bow2.getCooldown());
		}
		if(weapon1.getAttack() == 0 && cooldownTimer1 == 0) {
			weapon1.setAttack(-1);
			cooldownTimer1 = weapon1.getCooldown();
		}
		if(weapon2.getAttack() == 0 && cooldownTimer2 == 0) {
			weapon2.setAttack(-1);
			cooldownTimer2 = weapon2.getCooldown();
		}
		if(bow1.getAttack() == 0 && bowCooldownTimer1 == 0) {
			bow1.setAttack(-1);
			bowCooldownTimer1 = bow1.getCooldown();
		}
		if(bow2.getAttack() == 0 && bowCooldownTimer2 == 0) {
			bow2.setAttack(-1);
			bowCooldownTimer2 = bow2.getCooldown();
		}
	}

	public boolean player1TouchingGround() {
		//Account for Falling Too Much:
		if(player1.getY() > height - bottomBar - player1.getHeight() / 2) {
			player1.setY(height - bottomBar - player1.getHeight() / 2);
		}
		if (player1.getY() == height - bottomBar - player1.getHeight() / 2)
			return true;
		else
			return false;
	}

	public boolean player2TouchingGround() {
		//Account for Falling Too Much:
		if(player2.getY() > height - bottomBar - player2.getHeight() / 2) {
			player2.setY(height - bottomBar - player2.getHeight() / 2);
		}
		if (player2.getY() == height - bottomBar - player2.getHeight() / 2)
			return true;
		else
			return false;
	}

	public void weaponFollow() {
		if (player1.isFacingLeft()) {
			weapon1.setX(player1.getX() - 2 * p1.getWidth() / 3);
			if(bow1.getAttack() == -1 || bow1.getAttack() == 0)
				bow1.setX(player1.getX() - 2 * p1.getWidth() / 3);
		}
		else {
			weapon1.setX(player1.getX() + 2 * p1.getWidth() / 3);
			if(bow1.getAttack() == -1 || bow1.getAttack() == 0)
				bow1.setX(player1.getX() + 2 * p1.getWidth() / 3);
		}
		weapon1.setY(player1.getY());
		if(bow1.getAttack() == -1 || bow1.getAttack() == 0)
			bow1.setY(player1.getY());
		if (player2.isFacingLeft()) {
			weapon2.setX(player2.getX() - 2 * p2.getWidth() / 3);
			if(bow2.getAttack() == -1 || bow2.getAttack() == 0)
				bow2.setX(player2.getX() - 2 * p2.getWidth() / 3);
		}
		else {
			weapon2.setX(player2.getX() + 2 * p2.getWidth() / 3);
			if(bow2.getAttack() == -1 || bow2.getAttack() == 0)
				bow2.setX(player2.getX() + 2 * p2.getWidth() / 3);
		}
		weapon2.setY(player2.getY());
		if(bow2.getAttack() == -1 || bow2.getAttack() == 0)
			bow2.setY(player2.getY());
	}

	public void drawPlayerHitboxes() {
		rectMode(CORNER);
		// Player1 hitbox:
		fill(0, 0, 255);
		rect(player1.getHitbox().x, player1.getHitbox().y, player1.getHitbox().width, player1.getHitbox().height);
		// Player2 hitbox:
		fill(0, 0, 255);
		rect(player2.getHitbox().x, player2.getHitbox().y, player2.getHitbox().width, player2.getHitbox().height);
	}

	public void drawWeaponHitboxes() {
		// Weapon1 hitbox:
		rectMode(CORNER);
		fill(0, 255, 255);
		rect((int) weapon1.getHitbox().x, (int) weapon1.getHitbox().y, weapon1.getHitbox().width, weapon1.getHitbox().height);

		// Weapon2 hitbox:
		fill(0, 255, 255);
		rect((int) weapon2.getHitbox().x, (int) weapon2.getHitbox().y, weapon2.getHitbox().width, weapon2.getHitbox().height);
	}
	
	public void gameOver() {
		if(player1.getHealth() <= 0 || player2.getHealth() <= 0) {
			inCombat = false;
			if(player1.getHealth() <= 0) {
				background(100,0,0);
				fill(255,255,255);
				zinnia.stopAudio();
				textSize(100);
				text("Player 2 Wins", 300, 200);
			}
			else if(player2.getHealth() <= 0) {
				background(0,100,0);
				fill(255,255,255);
				zinnia.stopAudio();
				textSize(100);
				text("Player 1 Wins", 300, 200);
			}
		}
	}

	public boolean hmm() {
		if(hmm.toString().equals(new String("sharick"))) {
			return true;
		}
		else
			return false;
	}

}
